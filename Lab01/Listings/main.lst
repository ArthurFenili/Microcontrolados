


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuário pressionar uma c
                       have.
    7 00000000         ; Caso o usuário pressione uma chave, um LED deve pisca
                       r a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instruções do t
                                                            ipo Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declarações EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definições de Valores
   17 00000000         
   18 00000000         
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; Área de Dados - Declarações de variáveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variável for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posição da RAM  
   28 00000000         
   29 00000000         ; ------------------------------------------------------
                       -------------------------
   30 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir se
                       rá armazenado na memória de 
   31 00000000         ;                  código
   32 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   33 00000000         
   34 00000000         ; Se alguma função do arquivo for chamada em outro arq
                       uivo 
   35 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a pa
                                                            rtir de 
   36 00000000         ; outro arquivo. No caso startup.s
   37 00000000                 EXPORT           Pisca_Transistor_PP5
   38 00000000                 EXPORT           Pisca_Transistor_PB4
   39 00000000                 EXPORT           Pisca_Transistor_PB5
   40 00000000         
   41 00000000         
   42 00000000         ; Se chamar alguma função externa 
   43 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   44 00000000         ; função <func>



ARM Macro Assembler    Page 2 


   45 00000000                 IMPORT           PLL_Init
   46 00000000                 IMPORT           SysTick_Init
   47 00000000                 IMPORT           SysTick_Wait1ms
   48 00000000                 IMPORT           GPIO_Init
   49 00000000                 IMPORT           PortB_Output
   50 00000000                 IMPORT           PortJ_Input
   51 00000000                 IMPORT           PortP_Output
   52 00000000                 IMPORT           LED_Output
   53 00000000                 IMPORT           Display_Output
   54 00000000         
   55 00000000         ; Mapeamento dos 7 segmentos (0 a F)
   56 00000000 3F 06 5B 
              4F 66 6D 
              7D 07 7F 
              6F       MAPEAMENTO_7SEG
                               DCB              0x3F, 0x06, 0x5B, 0x4F, 0x66, 0
x6D, 0x7D, 0x07, 0x7F, 0x6F
   57 0000000A         ; ------------------------------------------------------
                       -------------------------
   58 0000000A         ; Função main()
   59 0000000A         Start
   60 0000000A F7FF FFFE       BL               PLL_Init    ; chama a subrotina
                                                             para alterar o clo
                                                            ck do microcontrola
                                                            dor para 80MHz
   61 0000000E F7FF FFFE       BL               SysTick_Init ; chama a subrotin
                                                            a para inicializar 
                                                            o SysTick
   62 00000012 F7FF FFFE       BL               GPIO_Init   ; chama a subrotina
                                                             que inicializa os 
                                                            GPIO
   63 00000016         
   64 00000016 F04F 0900       MOV              R9, #0      ; Contador incremen
                                                            tar ou decrementar 
                                                            após varias piscad
                                                            as de transistor
   65 0000001A F04F 0400       MOV              R4, #0      ; Contador para pis
                                                            car os leds
   66 0000001E         
   67 0000001E F04F 0700       MOV              R7, #0      ; contador
   68 00000022 F04F 0601       MOV              R6, #1      ; passo
   69 00000026 F04F 0501       MOV              R5, #1      ; sentido (1 cresce
                                                            nte 0 decrescente)
   70 0000002A         
   71 0000002A         MainLoop
   72 0000002A F7FF FFFE       BL               Display_Output ; chama a subrot
                                                            ina para acender o 
                                                            display
   73 0000002E F7FF FFFE       BL               LED_Output  ; chama s subrotina
                                                             para acender os le
                                                            ds
   74 00000032 F1B9 0F32       CMP              R9, #50     ; verificação pra
                                                             piscar os leds e i
                                                            ncrementar/decremen
                                                            tar contador
   75 00000036 BF08            IT               EQ
   76 00000038 F000 F827       BLEQ             chamaLED    ; se for momento de
                                                             piscar led, chama 
                                                            a subrotina de pisc



ARM Macro Assembler    Page 3 


                                                            ar
   77 0000003C F1B9 0F32       CMP              R9, #50
   78 00000040 BF04            ITT              EQ
   79 00000042 F04F 0900       MOVEQ            R9, #0
   80 00000046 F000 F813       BLEQ             chamaContador ; se for momento 
                                                            de modificar o cont
                                                            ador, chama a subro
                                                            tina para increment
                                                            ar ou decrementar
   81 0000004A F109 0901       ADD              R9, R9, #1
   82 0000004E         
   83 0000004E F7FF FFFE       BL               PortJ_Input ; chama a subrotina
                                                             que lê o estado d
                                                            as chaves e coloca 
                                                            o resultado em R0
   84 00000052 2802            CMP              R0, #2_00000010 ; verifica se S
                                                            W1 foi apertada
   85 00000054 D002            BEQ              Verifica_SW1 ; se foi, pula
   86 00000056 2801            CMP              R0, #2_00000001 ; verifica se S
                                                            W2 foi apertada
   87 00000058 D005            BEQ              Verifica_SW2 ; se foi, pula
   88 0000005A         
   89 0000005A E7E6            B                MainLoop    ; retorna para o co
                                                            meço do loop princ
                                                            ipal
   90 0000005C         
   91 0000005C         Verifica_SW1
   92 0000005C 2E09            CMP              R6, #9      ; verifica se o pas
                                                            so chegou em 9
   93 0000005E BF34            ITE              LO
   94 00000060 3601            ADDLO            R6, #1      ; se não chegou, i
                                                            ncrementa passo em 
                                                            1
   95 00000062 2601            MOVHS            R6, #1      ; se chegou, reinic
                                                            ia contagem do pass
                                                            o
   96 00000064 E7E1            B                MainLoop    ; retorna para o co
                                                            meço do loop princ
                                                            ipal
   97 00000066         
   98 00000066         Verifica_SW2
   99 00000066 2D01            CMP              R5, #1      ; verifica se o sen
                                                            tido é crescente
  100 00000068 BF0C            ITE              EQ
  101 0000006A 2500            MOVEQ            R5, #0      ; se for, muda a fl
                                                            ag para decrescente
                                                            
  102 0000006C 2501            MOVNE            R5, #1      ; se não for, muda
                                                             a flag para cresce
                                                            nte
  103 0000006E E7DC            B                MainLoop    ; retorna para o co
                                                            meço do loop princ
                                                            ipal
  104 00000070         
  105 00000070         chamaContador
  106 00000070 2D01            CMP              R5, #1      ; verifica a flag d
                                                            o sentido
  107 00000072 D000            BEQ              contadorCrescente ; pula para f
                                                            unção de incremen



ARM Macro Assembler    Page 4 


                                                            to do contador
  108 00000074 D104            BNE              contadorDecrescente ; pula para
                                                             função de decrem
                                                            ento do contador
  109 00000076         
  110 00000076         contadorCrescente
  111 00000076 2F63            CMP              R7, #99     ;     ; verifica se
                                                             o contador chegou 
                                                            em 99
  112 00000078 BF34            ITE              LO
  113 0000007A 4437            ADDLO            R7, R6      ;    ; se não cheg
                                                            ou, incrementa o co
                                                            ntador com o numero
                                                             atual do passo
  114 0000007C 2700            MOVHS            R7, #0      ; se chegou reinici
                                                            a o contador para 0
                                                            
  115 0000007E 4770            BX               LR
  116 00000080         
  117 00000080         contadorDecrescente
  118 00000080 2F00            CMP              R7, #0      ; verifica se o con
                                                            tador chegou em 0
  119 00000082 BF4C            ITE              MI
  120 00000084 2763            MOVMI            R7, #99     ; se chegou reinici
                                                            a o contador para 9
                                                            9
  121 00000086 1BBF            SUBPL            R7, R6      ; se não chegou, d
                                                            ecrementa o contado
                                                            r com o numero atua
                                                            l do passo
  122 00000088 4770            BX               LR
  123 0000008A         
  124 0000008A         
  125 0000008A         chamaLED
  126 0000008A         ; Pisca LED de fora pra dentro
  127 0000008A F04F 0801       MOV              R8, #1
  128 0000008E 4444            ADD              R4, R4, R8  ; incrementa em 1 o
                                                             estágio do led
  129 00000090 2C07            CMP              R4, #7      ; verifica se o est
                                                            ágio do led já ch
                                                            egou no ultimo
  130 00000092 BF88            IT               HI
  131 00000094 2400            MOVHI            R4, #0      ; se sim, reinicia
  132 00000096 4770            BX               LR
  133 00000098         
  134 00000098         Pisca_Transistor_PP5
  135 00000098 F04F 0020       MOV              R0, #2_00100000
  136 0000009C B500            PUSH             {LR}
  137 0000009E F7FF FFFE       BL               PortP_Output ; chama a subrotin
                                                            a para ativar o tra
                                                            nsistor
  138 000000A2 F04F 0001       MOV              R0, #1
  139 000000A6 F7FF FFFE       BL               SysTick_Wait1ms
  140 000000AA F04F 0000       MOV              R0, #2_00000000
  141 000000AE F7FF FFFE       BL               PortP_Output ; chama a subrotin
                                                            a para desativar o 
                                                            transistor
  142 000000B2 F04F 0001       MOV              R0, #1
  143 000000B6 F7FF FFFE       BL               SysTick_Wait1ms



ARM Macro Assembler    Page 5 


  144 000000BA F85D EB04       POP              {LR}
  145 000000BE 4770            BX               LR
  146 000000C0         
  147 000000C0         Pisca_Transistor_PB4
  148 000000C0 F04F 0010       MOV              R0, #2_00010000
  149 000000C4 B500            PUSH             {LR}
  150 000000C6 F7FF FFFE       BL               PortB_Output ; chama a subrotin
                                                            a para ativar o tra
                                                            nsistor
  151 000000CA F04F 0001       MOV              R0, #1
  152 000000CE F7FF FFFE       BL               SysTick_Wait1ms
  153 000000D2 F04F 0000       MOV              R0, #2_00000000
  154 000000D6 F7FF FFFE       BL               PortB_Output ; chama a subrotin
                                                            a para desativar o 
                                                            transistor
  155 000000DA F04F 0001       MOV              R0, #1
  156 000000DE F7FF FFFE       BL               SysTick_Wait1ms
  157 000000E2 F85D EB04       POP              {LR}
  158 000000E6 4770            BX               LR
  159 000000E8         
  160 000000E8         Pisca_Transistor_PB5
  161 000000E8 F04F 0020       MOV              R0, #2_00100000
  162 000000EC B500            PUSH             {LR}
  163 000000EE F7FF FFFE       BL               PortB_Output ; chama a subrotin
                                                            a para ativar o tra
                                                            nsistor
  164 000000F2 F04F 0001       MOV              R0, #1
  165 000000F6 F7FF FFFE       BL               SysTick_Wait1ms
  166 000000FA F04F 0000       MOV              R0, #2_00000000
  167 000000FE F7FF FFFE       BL               PortB_Output ; chama a subrotin
                                                            a para desativar o 
                                                            transistor
  168 00000102 F04F 0001       MOV              R0, #1
  169 00000106 F7FF FFFE       BL               SysTick_Wait1ms
  170 0000010A F85D EB04       POP              {LR}
  171 0000010E 4770            BX               LR
  172 00000110         
  173 00000110         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  174 00000110         ; Fim do Arquivo
  175 00000110         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  176 00000110                 ALIGN                        ;Garante que o fim 
                                                            da seção está al
                                                            inhada 
  177 00000110                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\Arthur\AppData\Local\Ar
m\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" 
--predefine="__UVISION_VERSION SETA 539" --predefine="TM4C1294NCPDT SETA 1" --l
ist=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 32 in file main.s
   Uses
      None
Comment: .text unused
MAPEAMENTO_7SEG 00000000

Symbol: MAPEAMENTO_7SEG
   Definitions
      At line 56 in file main.s
   Uses
      None
Comment: MAPEAMENTO_7SEG unused
MainLoop 0000002A

Symbol: MainLoop
   Definitions
      At line 71 in file main.s
   Uses
      At line 89 in file main.s
      At line 96 in file main.s
      At line 103 in file main.s

Pisca_Transistor_PB4 000000C0

Symbol: Pisca_Transistor_PB4
   Definitions
      At line 147 in file main.s
   Uses
      At line 38 in file main.s
Comment: Pisca_Transistor_PB4 used once
Pisca_Transistor_PB5 000000E8

Symbol: Pisca_Transistor_PB5
   Definitions
      At line 160 in file main.s
   Uses
      At line 39 in file main.s
Comment: Pisca_Transistor_PB5 used once
Pisca_Transistor_PP5 00000098

Symbol: Pisca_Transistor_PP5
   Definitions
      At line 134 in file main.s
   Uses
      At line 37 in file main.s
Comment: Pisca_Transistor_PP5 used once
Start 0000000A

Symbol: Start
   Definitions
      At line 59 in file main.s
   Uses
      At line 35 in file main.s
Comment: Start used once
Verifica_SW1 0000005C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Verifica_SW1
   Definitions
      At line 91 in file main.s
   Uses
      At line 85 in file main.s
Comment: Verifica_SW1 used once
Verifica_SW2 00000066

Symbol: Verifica_SW2
   Definitions
      At line 98 in file main.s
   Uses
      At line 87 in file main.s
Comment: Verifica_SW2 used once
chamaContador 00000070

Symbol: chamaContador
   Definitions
      At line 105 in file main.s
   Uses
      At line 80 in file main.s
Comment: chamaContador used once
chamaLED 0000008A

Symbol: chamaLED
   Definitions
      At line 125 in file main.s
   Uses
      At line 76 in file main.s
Comment: chamaLED used once
contadorCrescente 00000076

Symbol: contadorCrescente
   Definitions
      At line 110 in file main.s
   Uses
      At line 107 in file main.s
Comment: contadorCrescente used once
contadorDecrescente 00000080

Symbol: contadorDecrescente
   Definitions
      At line 117 in file main.s
   Uses
      At line 108 in file main.s
Comment: contadorDecrescente used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Display_Output 00000000

Symbol: Display_Output
   Definitions
      At line 53 in file main.s
   Uses
      At line 72 in file main.s
Comment: Display_Output used once
GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 48 in file main.s
   Uses
      At line 62 in file main.s
Comment: GPIO_Init used once
LED_Output 00000000

Symbol: LED_Output
   Definitions
      At line 52 in file main.s
   Uses
      At line 73 in file main.s
Comment: LED_Output used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 45 in file main.s
   Uses
      At line 60 in file main.s
Comment: PLL_Init used once
PortB_Output 00000000

Symbol: PortB_Output
   Definitions
      At line 49 in file main.s
   Uses
      At line 150 in file main.s
      At line 154 in file main.s
      At line 163 in file main.s
      At line 167 in file main.s

PortJ_Input 00000000

Symbol: PortJ_Input
   Definitions
      At line 50 in file main.s
   Uses
      At line 83 in file main.s
Comment: PortJ_Input used once
PortP_Output 00000000

Symbol: PortP_Output
   Definitions
      At line 51 in file main.s
   Uses
      At line 137 in file main.s
      At line 141 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 61 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 47 in file main.s
   Uses
      At line 139 in file main.s
      At line 143 in file main.s
      At line 152 in file main.s
      At line 156 in file main.s
      At line 165 in file main.s
      At line 169 in file main.s

9 symbols
357 symbols in table
